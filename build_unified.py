#!/usr/bin/env python3
"""
Script de construction pour SyncMark Unifi√©
Automatise la compilation et la pr√©paration de l'application unifi√©e
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def clean_build_directories():
    """Nettoie les r√©pertoires de build pr√©c√©dents"""
    print("üßπ Nettoyage des r√©pertoires de build...")
    
    directories_to_clean = ['build', 'dist/__pycache__']
    files_to_clean = ['temp_manifest.json']
    
    for directory in directories_to_clean:
        if os.path.exists(directory):
            try:
                shutil.rmtree(directory)
                print(f"   ‚úÖ Supprim√©: {directory}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è Impossible de supprimer {directory}: {e}")
    
    for file in files_to_clean:
        if os.path.exists(file):
            try:
                os.remove(file)
                print(f"   ‚úÖ Supprim√©: {file}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è Impossible de supprimer {file}: {e}")

def check_dependencies():
    """V√©rifie que les d√©pendances n√©cessaires sont install√©es"""
    print("üîç V√©rification des d√©pendances...")
    
    required_packages = ['pyinstaller']
    missing_packages = []
    
    for package in required_packages:
        try:
            result = subprocess.run([sys.executable, '-m', 'pip', 'show', package], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print(f"   ‚úÖ {package} install√©")
            else:
                missing_packages.append(package)
                print(f"   ‚ùå {package} manquant")
        except Exception as e:
            missing_packages.append(package)
            print(f"   ‚ùå {package} manquant (erreur: {e})")
    
    if missing_packages:
        print(f"\n‚ùå Packages manquants: {', '.join(missing_packages)}")
        print("Installez-les avec: pip install " + " ".join(missing_packages))
        return False
    
    return True

def build_unified_executable():
    """Compile l'application unifi√©e avec PyInstaller"""
    print("üî® Compilation de l'application unifi√©e...")
    
    spec_file = "SyncMarkUnified.spec"
    
    if not os.path.exists(spec_file):
        print(f"‚ùå Fichier spec non trouv√©: {spec_file}")
        return False
    
    try:
        # Commande PyInstaller
        cmd = [sys.executable, "-m", "PyInstaller", spec_file, "--clean"]
        
        print(f"   Ex√©cution: {' '.join(cmd)}")
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("   ‚úÖ Compilation r√©ussie")
            return True
        else:
            print("   ‚ùå Erreur de compilation:")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la compilation: {e}")
        return False

def verify_build():
    """V√©rifie que l'ex√©cutable a √©t√© cr√©√© correctement"""
    print("üîç V√©rification du build...")
    
    exe_path = Path("dist/SyncMark.exe")
    
    if exe_path.exists():
        size_mb = exe_path.stat().st_size / (1024 * 1024)
        print(f"   ‚úÖ Ex√©cutable cr√©√©: {exe_path}")
        print(f"   üìè Taille: {size_mb:.2f} MB")
        return True
    else:
        print(f"   ‚ùå Ex√©cutable non trouv√©: {exe_path}")
        return False

def create_deployment_package():
    """Cr√©e un package de d√©ploiement avec tous les fichiers n√©cessaires"""
    print("üì¶ Cr√©ation du package de d√©ploiement...")
    
    package_dir = Path("deployment_package")
    
    # Cr√©er le r√©pertoire de package
    if package_dir.exists():
        shutil.rmtree(package_dir)
    package_dir.mkdir()
    
    # Copier l'ex√©cutable
    exe_source = Path("dist/SyncMark.exe")
    if exe_source.exists():
        shutil.copy2(exe_source, package_dir / "SyncMark.exe")
        print("   ‚úÖ Ex√©cutable copi√©")
    else:
        print("   ‚ùå Ex√©cutable source non trouv√©")
        return False
    
    # Copier les fichiers de configuration n√©cessaires
    config_files = [
        "native_host_manifest.json",
        "manifest.json",
        "README.md"
    ]
    
    for config_file in config_files:
        if os.path.exists(config_file):
            shutil.copy2(config_file, package_dir / config_file)
            print(f"   ‚úÖ {config_file} copi√©")
        else:
            print(f"   ‚ö†Ô∏è {config_file} non trouv√© (optionnel)")
    
    # Cr√©er un script d'installation simplifi√©
    install_script = package_dir / "install.bat"
    with open(install_script, 'w', encoding='utf-8') as f:
        f.write("""@echo off
echo Installation de SyncMark...
echo.

REM Installation du Native Host
SyncMark.exe --mode install

echo.
echo Installation termin√©e !
echo.
echo Pour configurer SyncMark, lancez: SyncMark.exe --mode settings
echo Pour utiliser comme Native Host: SyncMark.exe --mode host
echo.
pause
""")
    
    print(f"   ‚úÖ Package cr√©√© dans: {package_dir}")
    return True

def main():
    """Fonction principale du script de build"""
    print("üöÄ Construction de SyncMark Unifi√©")
    print("=" * 50)
    
    # V√©rifier les d√©pendances
    if not check_dependencies():
        sys.exit(1)
    
    # Nettoyer les builds pr√©c√©dents
    clean_build_directories()
    
    # Compiler l'application
    if not build_unified_executable():
        print("\n‚ùå √âchec de la compilation")
        sys.exit(1)
    
    # V√©rifier le build
    if not verify_build():
        print("\n‚ùå √âchec de la v√©rification")
        sys.exit(1)
    
    # Cr√©er le package de d√©ploiement
    if not create_deployment_package():
        print("\n‚ùå √âchec de la cr√©ation du package")
        sys.exit(1)
    
    print("\n" + "=" * 50)
    print("üéâ Construction termin√©e avec succ√®s !")
    print("\nFichiers g√©n√©r√©s:")
    print("  - dist/SyncMark.exe (ex√©cutable principal)")
    print("  - deployment_package/ (package de d√©ploiement)")
    print("\nUtilisation:")
    print("  - Configuration: SyncMark.exe --mode settings")
    print("  - Native Host: SyncMark.exe --mode host")
    print("  - Installation: SyncMark.exe --mode install")

if __name__ == "__main__":
    main()